server:
  port: ${random.int(8189,9090)}
  error:
    include-message: always
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false

spring:
  application:
    name: swift-wheels-hub-reactive-booking
  webflux:
    base-path: /bookings
  codec:
    max-in-memory-size: 20MB
  data:
    mongodb:
      database: swift_wheels_hub_booking
      username: ${MONGODB_USERNAME}
      password: ${MONGODB_PASSWORD}
      uri: mongodb+srv://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@swiftwheelshubbooking.vegjl42.mongodb.net
    redis:
      database: 0
  redis:
    host: ${REDIS_HOST}
    password: ${REDIS_PASSWORD}
    port: 6379
  cloud:
    loadbalancer:
      enabled: true
      cache:
        enabled: true
    consul:
      enabled: true
      host: localhost
      port: 8500
      discovery:
        enabled: true
        prefer-ip-address: true
        instanceId: ${spring.application.name}-id
        serviceName: ${spring.application.name}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        hostname: localhost
        failFast: false
    function:
      definition: bookingUpdateConsumer;bookingRollbackConsumer
    stream:
      defaultBinder: kafka
      bindings:
        savedBookingProducer-out-0:
          destination: ${SAVED_BOOKING_REACTIVE_TOPIC}
          contentType: application/json
        updatedBookingProducer-out-0:
          destination: ${UPDATED_BOOKING_REACTIVE_TOPIC}
          contentType: application/json
        deletedBookingProducer-out-0:
          destination: ${DELETED_BOOKING_REACTIVE_TOPIC}
          contentType: application/json
        auditLogInfoProducer-out-0:
          destination: ${BOOKING_AUDIT_LOG_INFO_REACTIVE_TOPIC}
          contentType: application/json
        saveBookingCarUpdateProducer-out-0:
          destination: ${SAVE_BOOKING_CAR_UPDATE_REACTIVE_TOPIC}
          contentType: application/json
        updateBookingCarsUpdateProducer-out-0:
          destination: ${UPDATE_BOOKING_CARS_UPDATE_REACTIVE_TOPIC}
          contentType: application/json
        bookingUpdateConsumer-in-0:
          binder: kafka
          destination: ${BOOKING_UPDATE_REACTIVE_TOPIC}
          contentType: application/json
          group: ${BOOKING_CONSUMER_GROUP}
        bookingRollbackConsumer-in-0:
          binder: kafka
          destination: ${BOOKING_ROLLBACK_REACTIVE_TOPIC}
          contentType: application/json
          group: ${BOOKING_CONSUMER_GROUP}
      kafka:
        binder:
          auto-create-topics: true
          auto-add-partitions: false
          consumer-properties:
            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            allow.auto.create.topics: true
            auto.offset.reset: latest
        bindings:
          bookingUpdateConsumer-in-0:
            consumer:
              ack-mode: MANUAL_IMMEDIATE
              standard-headers: both
          bookingRollbackConsumer-in-0:
            consumer:
              ack-mode: MANUAL_IMMEDIATE
              standard-headers: both
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      acks: all
    consumer:
      enable-auto-commit: false
  web:
    resources:
      add-mappings: false

springdoc:
  swagger-ui:
    enabled: true
    path: /definition/swagger-ui.html
    operationsSorter: method
  api-docs:
    path: /definition/v3/api-docs
  show-actuator: true

management:
  server:
    port: ${server.port}
  endpoint:
    health:
      group:
        custom:
          show-components: always
          show-details: always
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,loggers,prometheus
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

logging:
  level:
    org:
      springframework:
        security: ERROR
        web:
          csrf:
            CsrfFilter: ERROR
        data:
          mongodb:
            core:
              ReactiveMongoTemplate: ERROR

apikey:
  secret: ${API_KEY_SECRET}

cors:
  mapping: '/**'
  allowedOrigins: '*'
  allowedMethods: '*'
  allowedHeaders: '*'
  codecMaxInMemorySizeInMb: 20

mongo-operations:
  enabled: true

webclient:
  url:
    swift-wheels-hub-agency-cars: http://swift-wheels-hub-reactive-agency/agency/cars

scheduled:
  fixedDelay: 5000

audit:
  enabled: true
