server:
  port: ${random.int(8189,9090)}
  error:
    include-message: always
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false

spring:
  application:
    name: swift-wheels-hub-reactive-expense
  webflux:
    base-path: /expense
  data:
    mongodb:
      database: swift_wheels_hub_expense
      username: ${MONGODB_USERNAME}
      password: ${MONGODB_PASSWORD}
      uri: mongodb+srv://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@swiftwheelshubexpense.qfupkzh.mongodb.net
  cloud:
    loadbalancer:
      enabled: true
      ribbon:
        enabled: false
      cache:
        enabled: false
    consul:
      enabled: true
      config:
        enabled: false
        acl-token: ${CONSUL_ACL_TOKEN}
      host: localhost
      port: 8500
      discovery:
        enabled: true
        prefer-ip-address: true
        instanceId: ${spring.application.name}-id
        serviceName: ${spring.application.name}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        hostname: localhost
        failFast: false
    function:
      definition: savedBookingConsumer;updatedBookingConsumer;deletedBookingConsumer
    stream:
      defaultBinder: kafka
      bindings:
        emailNotificationProducer-out-0:
          destination: ${EMAIL_NOTIFICATION_REACTIVE_TOPIC}
          contentType: application/json
        auditLogInfoProducer-out-0:
          destination: ${EXPENSE_AUDIT_LOG_INFO_REACTIVE_TOPIC}
          contentType: application/json
        savedBookingConsumer-in-0:
          binder: kafka
          destination: ${SAVED_BOOKING_REACTIVE_TOPIC}
          contentType: application/json
          group: ${EXPENSE_CONSUMER_GROUP}
        updatedBookingConsumer-in-0:
          binder: kafka
          destination: ${UPDATED_BOOKING_REACTIVE_TOPIC}
          contentType: application/json
          group: ${EXPENSE_CONSUMER_GROUP}
        deletedBookingConsumer-in-0:
          binder: kafka
          destination: ${DELETED_BOOKING_REACTIVE_TOPIC}
          contentType: application/json
          group: ${EXPENSE_CONSUMER_GROUP}
      kafka:
        binder:
          auto-create-topics: true
          auto-add-partitions: false
          consumer-properties:
            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            allow.auto.create.topics: true
  kafka:
    bootstrap-servers: localhost:9092
  sendgrid:
    api-key: ${SENDGRID_API_KEY}
  mvc:
    throw-exception-if-no-handler-found: true
  web:
    resources:
      add-mappings: false

springdoc:
  swagger-ui:
    enabled: true
    path: /definition/swagger-ui.html
    operationsSorter: method
  api-docs:
    path: /definition/v3/api-docs

management:
  server:
    port: ${server.port}
  endpoint:
    loggers:
      enabled: true
    health:
      group:
        custom:
          show-components: always
          show-details: always
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,loggers,prometheus
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

logging:
  level:
    org:
      springframework:
        security: DEBUG
        web:
          csrf:
            CsrfFilter: DEBUG
        data:
          mongodb:
            core:
              ReactiveMongoTemplate: DEBUG

apikey:
  secret: ${API_KEY_SECRET}

mongo-operations:
  enabled: true

webClient:
  url:
    swift-wheels-hub-bookings: http://swift-wheels-hub-reactive-booking/bookings
    swift-wheels-hub-agency-cars: http://swift-wheels-hub-reactive-agency/agency/cars

bookingConsumer:
  isMessageAckEnabled: false

scheduled:
  fixedDelay: 5000

audit:
  enabled: true
